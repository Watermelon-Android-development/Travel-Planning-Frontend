Index: app/src/main/java/com/example/travelplan/ShortestRouteAlgorithm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/travelplan/ShortestRouteAlgorithm.java b/app/src/main/java/com/example/travelplan/ShortestRouteAlgorithm.java
new file mode 100644
--- /dev/null	(date 1669984275530)
+++ b/app/src/main/java/com/example/travelplan/ShortestRouteAlgorithm.java	(date 1669984275530)
@@ -0,0 +1,52 @@
+package com.example.travelplan;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ShortestRouteAlgorithm {
+    static List<Integer> result;
+    static double shortestDistance = Double.POSITIVE_INFINITY;
+    static double[][] allLocations, allDistances;
+    public static void getShortestPath(double[] userPosition, List<TravelDatabaseHelper.Site> sites) {
+        allLocations = new double[sites.size() + 1][2];
+        allDistances = new double[allLocations.length][allLocations.length];
+        allLocations[0] = userPosition.clone();
+        for (int i = 0; i < sites.size(); i++) {
+            allLocations[i+1] = new double[]{sites.get(i).getxCoor(), sites.get(i).getyCoor()};
+        }
+        for (int i = 0; i < allLocations.length; i++) {
+            for (int j = 0; j < allLocations.length; j++) {
+                if (j == i || allDistances[i][j] != 0) continue;
+                double distance = Math.sqrt(Math.pow(allLocations[i][0] - allLocations[j][0], 2)
+                        + Math.pow(allLocations[i][1] - allLocations[j][1], 2));
+                allDistances[i][j] = allDistances[j][i] = distance;
+            }
+        }
+        boolean[] isVisited = new boolean[allLocations.length];
+        dfs(isVisited, 0, 0, new ArrayList<Integer>());
+    }
+
+    private static void dfs(boolean[] isVisited, int current, double distance, List<Integer> curResult) {
+        isVisited[current] = true;
+        curResult.add(current);
+        for (int i = 0; i < isVisited.length; i++) {
+            if (!isVisited[i]) break;
+            if (i == isVisited.length - 1) {
+                if (distance < shortestDistance) {
+                    shortestDistance = distance;
+                    result = new ArrayList<Integer>(curResult);
+                }
+                return;
+            }
+        }
+
+        for (int i = 0; i < isVisited.length; i++) {
+            if (isVisited[i]) continue;
+            double newDistance = distance + allDistances[current][i];
+            if (newDistance >= shortestDistance) continue;
+            dfs(isVisited, i, newDistance, curResult);
+            curResult.remove(curResult.size() - 1);
+            isVisited[i] = false;
+        }
+    }
+}
